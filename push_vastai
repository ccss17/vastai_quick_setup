#!/bin/bash
# push_vastai - Push current directory to vastai and start continuous sync
# Usage: ./push_vastai "<ssh_command>"

set -e

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

show_help() {
    cat << EOF
=============================================================================
Push Vastai Script
=============================================================================

Usage: $0 "<ssh_command>"

Arguments:
    ssh_command    SSH connection string (e.g., "ssh -p 22232 root@69.176.92.125 -L 8080:localhost:8080")

Examples:
    $0 "ssh -p 22232 root@69.176.92.125"
    $0 "ssh -p 22232 root@69.176.92.125 -L 8080:localhost:8080"

The script will:
    - Use current directory as local path
    - Set remote path to /data/<current_directory_name>
    - Extract SSH port, username, hostname
    - Execute rsync with exclusions (.pixi, *.pyc, __pycache__/)
    - Run vastai_quick_setup on remote host
    - Start continuous sync

Example: If run from ~/repo/llm, syncs to /data/llm on remote

=============================================================================
EOF
    exit 0
}

# Check arguments
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    show_help
fi

if [[ $# -lt 1 ]]; then
    echo -e "${RED}Error: Missing required argument${NC}"
    echo ""
    show_help
fi

SSH_COMMAND="$1"

# Get current directory
LOCAL_PATH="$(pwd)"
DIR_NAME="$(basename "$LOCAL_PATH")"
REMOTE_PATH="/data/$DIR_NAME"

# Parse SSH command
# Extract port (default 22)
if [[ "$SSH_COMMAND" =~ -p[[:space:]]+([0-9]+) ]]; then
    SSH_PORT="${BASH_REMATCH[1]}"
else
    SSH_PORT="22"
fi

# Extract user@host
if [[ "$SSH_COMMAND" =~ ([a-zA-Z0-9_-]+)@([a-zA-Z0-9._-]+) ]]; then
    SSH_USER="${BASH_REMATCH[1]}"
    SSH_HOST="${BASH_REMATCH[2]}"
else
    echo -e "${RED}Error: Could not parse user@host from SSH command${NC}"
    echo "SSH command: $SSH_COMMAND"
    exit 1
fi

# Display parsed information
echo -e "${BLUE}=== Parsed SSH Connection ===${NC}"
echo "  User:       $SSH_USER"
echo "  Host:       $SSH_HOST"
echo "  Port:       $SSH_PORT"
echo "  Local:      $LOCAL_PATH"
echo "  Remote:     $REMOTE_PATH"
echo ""

# Ensure /data directory exists on remote
echo -e "${BLUE}=== Preparing remote directory ===${NC}"
ssh -p "$SSH_PORT" "${SSH_USER}@${SSH_HOST}" "mkdir -p $REMOTE_PATH"
echo -e "${GREEN}✓ Remote directory ready${NC}"
echo ""

# Build and display rsync command
echo -e "${BLUE}=== Executing rsync ===${NC}"
echo ""

RSYNC_CMD="rsync -avz \
  --exclude='.pixi' \
  --exclude='*.pyc' \
  --exclude='__pycache__/' \
  --exclude='.git/' \
  -e 'ssh -p $SSH_PORT' \
  $LOCAL_PATH/ \
  ${SSH_USER}@${SSH_HOST}:${REMOTE_PATH}/"

echo "Command:"
echo "$RSYNC_CMD"
echo ""
echo -e "${YELLOW}Starting sync...${NC}"
echo ""

# Execute rsync
rsync -avz \
  --exclude='.pixi' \
  --exclude='*.pyc' \
  --exclude='__pycache__/' \
  --exclude='.git/' \
  -e "ssh -p $SSH_PORT" \
  "$LOCAL_PATH/" \
  "${SSH_USER}@${SSH_HOST}:${REMOTE_PATH}/"

EXIT_CODE=$?

echo ""
if [ $EXIT_CODE -eq 0 ]; then
    echo -e "${GREEN}✓ Sync completed successfully!${NC}"
    echo ""
    echo -e "${BLUE}=== Running vastai_quick_setup on remote host ===${NC}"
    
    ssh -p "$SSH_PORT" "${SSH_USER}@${SSH_HOST}" << 'EOF'
if [ ! -d ~/vastai_quick_setup ]; then
    cd ~ && git clone --depth 1 https://github.com/ccss17/vastai_quick_setup
    cd ~/vastai_quick_setup && ./setup.sh
fi
EOF
    
    SETUP_EXIT=$?
    if [ $SETUP_EXIT -eq 0 ]; then
        echo -e "${GREEN}✓ vastai_quick_setup completed successfully!${NC}"
        echo ""
        echo -e "${BLUE}=== Starting continuous sync ===${NC}"
        
        # Execute sync_vastai in foreground
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        exec "$SCRIPT_DIR/sync_vastai" -h "$SSH_HOST" -p "$SSH_PORT" -r "$REMOTE_PATH/" -l "$LOCAL_PATH/" -i 10 -e '.pixi' -e '*.pyc' -e '__pycache__/'
    else
        echo -e "${YELLOW}⚠ vastai_quick_setup exited with code: $SETUP_EXIT${NC}"
    fi
else
    echo -e "${RED}✗ Sync failed with exit code: $EXIT_CODE${NC}"
    exit $EXIT_CODE
fi
